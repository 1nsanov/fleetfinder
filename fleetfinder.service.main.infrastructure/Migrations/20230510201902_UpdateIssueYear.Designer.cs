// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using fleetfinder.service.main.domain.Enums.Common;
using fleetfinder.service.main.domain.Enums.Order.Cargo;
using fleetfinder.service.main.domain.Enums.Transport;
using fleetfinder.service.main.domain.Enums.Transport.Cargo;
using fleetfinder.service.main.domain.Enums.Transport.Passenger;
using fleetfinder.service.main.domain.Enums.Transport.Special;
using fleetfinder.service.main.infrastructure.Common.DbContexts;

#nullable disable

namespace fleetfinder.service.main.infrastructure.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    [Migration("20230510201902_UpdateIssueYear")]
    partial class UpdateIssueYear
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_body_kind", new[] { "auto_train", "beam_vehicle", "flatbed_vehicle", "hydraulic_lift", "cargo_passenger", "oversized_vehicle", "isothermal_vehicle", "container_vehicle", "feed_vehicle", "flour_vehicle", "open_vehicle", "panel_vehicle", "pickup", "pyramid", "semi_trailer", "light_trailer", "refrigerator", "roll_vehicle", "tractor_unit", "agricultural_grain_vehicle", "livestock_vehicle", "timber_vehicle", "glass_vehicle", "coupling", "tank_container", "curtain_sider", "insulated_vehicle", "pipe_vehicle", "trailer_truck", "van", "solid_metal", "chip_car" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_load_type", new[] { "top", "rear", "side", "with_hydroboard", "with_full_liftgate", "with_ramps_or_discharges", "with_tarmac", "with_stakes", "with_air_suspension" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_loaders", new[] { "without_movers", "one_movers", "two_movers", "three_movers" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_transportation_kind", new[] { "cargo_taxi", "apartment_moving", "office_moving", "furniture_transport", "food_transport", "intercity_transport", "international_transport", "lcl_transport", "livestock_transport", "personal_items_transport", "appliance_transport", "fruit_transport", "vegetable_transport", "country_house_moving", "warehouse_moving", "piano_transport", "safe_transport", "refrigerator_transport", "equipment_transport", "construction_materials_transport", "motorcycle_transport" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_transportation_type", new[] { "full_load", "partial_load", "overload" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "cargo_type", new[] { "t1", "t2", "t3", "t5", "t10", "t20" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "experience_work", new[] { "less_year1", "year1", "year2", "year3", "year4", "year5", "year6", "year7", "year8", "year9", "more_year10" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "passenger_facilities", new[] { "comfortable", "economy", "standard" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "passenger_option", new[] { "audio_system_and_microphone", "air_conditioner", "ventilation_system", "large_luggage_compartments", "monitor_and_dvd", "individual_lighting", "seat_heating", "spacious_salon", "safety_belts", "climate_control", "toilet", "sleeping_places" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "passenger_rental_duration", new[] { "per_day", "one_day", "per_hour", "per_month", "long_term" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "passenger_transportation_kind", new[] { "order", "children", "tourists", "intercity", "abroad_trips", "corporate", "airport_transfer", "employee_delivery", "wedding", "vip", "medical", "funeral", "pet", "car_home", "excursion", "party_bus", "courier" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "passenger_type", new[] { "taxi", "limousine", "minivan", "bus", "shiftw", "water" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "payment_method", new[] { "cash", "non_cash", "cash_and_non_cash", "card_payment" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "payment_order", new[] { "prepayment", "payment_upon_delivery", "installment_payment" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "region", new[] { "bender", "tiraspol", "grigoriopol", "dubasari", "camenka", "ribnitsa", "slobozia" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "special_type", new[] { "excavator", "aerial_platform", "truck_crane", "truck_fuel", "bulldozer", "hydra_hammer", "grader", "crag_loader", "road_roller", "mini_loader", "mini_excavator", "waste_car", "dump_truck", "tractor", "front_loader", "truck_cement", "excavator_loader", "yamobur" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "state", new[] { "actual", "archived" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Cargo.CargoOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<CargoBodyKind?>("BodyKind")
                        .HasColumnType("cargo_body_kind");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<Region>("DeliverRegion")
                        .HasColumnType("region");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<CargoLoadType?>("LoadType")
                        .HasColumnType("cargo_load_type");

                    b.Property<CargoLoaders?>("Loaders")
                        .HasColumnType("cargo_loaders");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("numeric");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<Region>("PickupRegion")
                        .HasColumnType("region");

                    b.Property<DateOnly>("ShipmentDate")
                        .HasColumnType("date");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<CargoTransportationType?>("TransportationType")
                        .HasColumnType("cargo_transportation_type");

                    b.Property<CargoType>("Type")
                        .HasColumnType("cargo_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CargoOrder");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Cargo.CargoOrderImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("CargoOrderImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Passenger.PassengerOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("CountSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<Region>("DeliverRegion")
                        .HasColumnType("region");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<PassengerFacilities?>("Facilities")
                        .HasColumnType("passenger_facilities");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("numeric");

                    b.Property<PassengerOption?>("Option")
                        .HasColumnType("passenger_option");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<Region>("PickupRegion")
                        .HasColumnType("region");

                    b.Property<PassengerRentalDuration?>("RentalDuration")
                        .HasColumnType("passenger_rental_duration");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<PassengerTransportationKind?>("TransportationKind")
                        .HasColumnType("passenger_transportation_kind");

                    b.Property<PassengerType>("Type")
                        .HasColumnType("passenger_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PassengerOrder");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Passenger.PassengerOrderImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("PassengerOrderImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Special.SpecialOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<Region>("DeliverRegion")
                        .HasColumnType("region");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("numeric");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<Region>("PickupRegion")
                        .HasColumnType("region");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<SpecialType>("Type")
                        .HasColumnType("special_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpecialOrder");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Special.SpecialOrderImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SpecialOrderImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Cargo.CargoTransport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ExperienceWork?>("ExperienceWork")
                        .HasColumnType("experience_work");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<PaymentOrder?>("PaymentOrder")
                        .HasColumnType("payment_order");

                    b.Property<Region>("Region")
                        .HasColumnType("region");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<CargoTransportationKind?>("TransportationKind")
                        .HasColumnType("cargo_transportation_kind");

                    b.Property<CargoType>("Type")
                        .HasColumnType("cargo_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("YearIssue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CargoTransport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Cargo.CargoTransportImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<long>("TransportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("CargoTransportImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("CountSeats")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ExperienceWork?>("ExperienceWork")
                        .HasColumnType("experience_work");

                    b.Property<PassengerFacilities?>("Facilities")
                        .HasColumnType("passenger_facilities");

                    b.Property<decimal?>("MinOrderTime")
                        .HasColumnType("numeric");

                    b.Property<PassengerOption?>("Option")
                        .HasColumnType("passenger_option");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<PaymentOrder?>("PaymentOrder")
                        .HasColumnType("payment_order");

                    b.Property<Region>("Region")
                        .HasColumnType("region");

                    b.Property<PassengerRentalDuration?>("RentalDuration")
                        .HasColumnType("passenger_rental_duration");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<PassengerTransportationKind?>("TransportationKind")
                        .HasColumnType("passenger_transportation_kind");

                    b.Property<PassengerType>("Type")
                        .HasColumnType("passenger_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("YearIssue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PassengerTransport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransportImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<long>("TransportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("PassengerTransportImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Special.SpecialTransport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<ExperienceWork?>("ExperienceWork")
                        .HasColumnType("experience_work");

                    b.Property<PaymentMethod?>("PaymentMethod")
                        .HasColumnType("payment_method");

                    b.Property<PaymentOrder?>("PaymentOrder")
                        .HasColumnType("payment_order");

                    b.Property<Region>("Region")
                        .HasColumnType("region");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<SpecialType>("Type")
                        .HasColumnType("special_type");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("YearIssue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpecialTransport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Special.SpecialTransportImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<long>("TransportId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransportId");

                    b.ToTable("SpecialTransportImage");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<State>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("state")
                        .HasDefaultValueSql("'actual'::state");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', current_timestamp)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Cargo.CargoOrder", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("CargoOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Cargo.CargoOrderImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Order.Cargo.CargoOrder", "Order")
                        .WithMany("Images")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Passenger.PassengerOrder", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("PassengerOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Passenger.PassengerOrderImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Order.Passenger.PassengerOrder", "Order")
                        .WithMany("Images")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Special.SpecialOrder", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("SpecialOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Special.SpecialOrderImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Order.Special.SpecialOrder", "Order")
                        .WithMany("Images")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Cargo.CargoTransport", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("CargoTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("fleetfinder.service.main.domain.Transport.Cargo.Body", "Body", b1 =>
                        {
                            b1.Property<long>("CargoTransportId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Height")
                                .HasColumnType("numeric");

                            b1.Property<CargoBodyKind?>("Kind")
                                .HasColumnType("cargo_body_kind");

                            b1.Property<decimal?>("Length")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("LoadCapacity")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Volume")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("numeric");

                            b1.HasKey("CargoTransportId");

                            b1.ToTable("CargoTransport");

                            b1.WithOwner()
                                .HasForeignKey("CargoTransportId");
                        });

                    b.OwnsOne("fleetfinder.service.main.domain.Bases.Price", "Price", b1 =>
                        {
                            b1.Property<long>("CargoTransportId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("PerHour")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerKm")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerShift")
                                .HasColumnType("numeric");

                            b1.HasKey("CargoTransportId");

                            b1.ToTable("CargoTransport");

                            b1.WithOwner()
                                .HasForeignKey("CargoTransportId");
                        });

                    b.Navigation("Body")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Cargo.CargoTransportImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Transport.Cargo.CargoTransport", "Transport")
                        .WithMany("Images")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransport", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("PassengerTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("fleetfinder.service.main.domain.Bases.Price", "Price", b1 =>
                        {
                            b1.Property<long>("PassengerTransportId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("PerHour")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerKm")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerShift")
                                .HasColumnType("numeric");

                            b1.HasKey("PassengerTransportId");

                            b1.ToTable("PassengerTransport");

                            b1.WithOwner()
                                .HasForeignKey("PassengerTransportId");
                        });

                    b.OwnsOne("fleetfinder.service.main.domain.Transport.Passenger.Size", "Size", b1 =>
                        {
                            b1.Property<long>("PassengerTransportId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("Height")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Length")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("Width")
                                .HasColumnType("numeric");

                            b1.HasKey("PassengerTransportId");

                            b1.ToTable("PassengerTransport");

                            b1.WithOwner()
                                .HasForeignKey("PassengerTransportId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Size")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransportImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransport", "Transport")
                        .WithMany("Images")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Special.SpecialTransport", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Users.User", "User")
                        .WithMany("SpecialTransports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("fleetfinder.service.main.domain.Bases.Price", "Price", b1 =>
                        {
                            b1.Property<long>("SpecialTransportId")
                                .HasColumnType("bigint");

                            b1.Property<decimal?>("PerHour")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerKm")
                                .HasColumnType("numeric");

                            b1.Property<decimal?>("PerShift")
                                .HasColumnType("numeric");

                            b1.HasKey("SpecialTransportId");

                            b1.ToTable("SpecialTransport");

                            b1.WithOwner()
                                .HasForeignKey("SpecialTransportId");
                        });

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Special.SpecialTransportImage", b =>
                {
                    b.HasOne("fleetfinder.service.main.domain.Transport.Special.SpecialTransport", "Transport")
                        .WithMany("Images")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Users.User", b =>
                {
                    b.OwnsOne("fleetfinder.service.main.domain.Users.Contact", "Contact", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("PhoneTelegram")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneViber")
                                .HasColumnType("text");

                            b1.Property<string>("PhoneWhatsapp")
                                .HasColumnType("text");

                            b1.Property<string>("WorkingMode")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("fleetfinder.service.main.domain.Users.FullName", "FullName", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Second")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Surname")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("fleetfinder.service.main.domain.Users.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime?>("ExpiryTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Cargo.CargoOrder", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Passenger.PassengerOrder", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Order.Special.SpecialOrder", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Cargo.CargoTransport", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Passenger.PassengerTransport", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Transport.Special.SpecialTransport", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("fleetfinder.service.main.domain.Users.User", b =>
                {
                    b.Navigation("CargoOrders");

                    b.Navigation("CargoTransports");

                    b.Navigation("PassengerOrders");

                    b.Navigation("PassengerTransports");

                    b.Navigation("SpecialOrders");

                    b.Navigation("SpecialTransports");
                });
#pragma warning restore 612, 618
        }
    }
}
